#!/bin/bash

# Container Setup Script for RTD GTFS-RT Pipeline
# Manages Kafka 4.0.0 with KRaft (no ZooKeeper)
# Supports both Docker and Podman

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"

# Detect container runtime
detect_container_runtime() {
    if [ -n "$CONTAINER_RUNTIME" ]; then
        echo "$CONTAINER_RUNTIME"
    elif command -v podman &> /dev/null && podman info &> /dev/null; then
        echo "podman"
    elif command -v docker &> /dev/null && docker info &> /dev/null; then
        echo "docker"
    else
        echo "none"
    fi
}

# Set container runtime and compose command
RUNTIME=$(detect_container_runtime)
if [ "$RUNTIME" = "podman" ]; then
    DOCKER_CMD="podman"
    COMPOSE_CMD="podman-compose"
    # Check if podman-compose is installed
    if ! command -v podman-compose &> /dev/null; then
        COMPOSE_CMD="podman compose"  # Try podman compose subcommand
    fi
elif [ "$RUNTIME" = "docker" ]; then
    DOCKER_CMD="docker"
    COMPOSE_CMD="docker-compose"
else
    echo "Error: No container runtime found (Docker or Podman)"
    exit 1
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}RTD GTFS-RT Container Environment${NC}"
    echo -e "${BLUE}Container Runtime: ${RUNTIME^}${NC}"
    echo -e "${BLUE}================================${NC}"
}

show_usage() {
    print_header
    echo
    echo "Usage: ./docker-setup <command>"
    echo
    echo "Commands:"
    echo "  start       - Start Kafka 4.0.0 with KRaft (no ZooKeeper)"
    echo "  stop        - Stop all services"
    echo "  restart     - Restart all services"
    echo "  status      - Show service status"
    echo "  logs        - Show service logs"
    echo "  setup       - Start services and create RTD topics"
    echo "  clean       - Stop services and remove volumes"
    echo "  ui          - Open Kafka UI in browser"
    echo "  colima      - Manage Colima VM (start/stop/status)"
    echo
    echo "Service Information:"
    echo "  Kafka:      localhost:9092"
    echo "  Kafka UI:   http://localhost:8090"
    echo "  Network:    rtd-gtfs-network"
    echo
    echo "Examples:"
    echo "  ./docker-setup start     # Start Kafka"
    echo "  ./docker-setup setup     # Start + create topics"
    echo "  ./docker-setup status    # Check if running"
}

check_container_runtime() {
    print_status "Using container runtime: ${RUNTIME}"
    
    if [ "$RUNTIME" = "none" ]; then
        print_error "No container runtime found"
        print_error "Please install Docker or Podman:"
        print_error "  Docker: brew install docker colima"
        print_error "  Podman: brew install podman"
        exit 1
    fi

    if ! $DOCKER_CMD info &> /dev/null; then
        print_error "${RUNTIME} daemon is not running"
        
        if [ "$RUNTIME" = "docker" ]; then
            # Check if Colima is available
            if command -v colima &> /dev/null; then
                print_error "Please start Colima: colima start"
                print_status "Colima commands:"
                print_status "  colima start              # Start VM"
                print_status "  colima start --cpu 4      # Start with 4 CPUs"
                print_status "  colima start --memory 8   # Start with 8GB RAM"
                print_status "  colima status              # Check status"
            else
                print_error "Please start Docker daemon or install Colima"
                print_error "  macOS: brew install colima && colima start"
            fi
        elif [ "$RUNTIME" = "podman" ]; then
            print_error "Please start Podman machine:"
            print_status "  podman machine init       # Initialize VM"
            print_status "  podman machine start      # Start VM"
            print_status "  podman machine list       # Check status"
        fi
        exit 1
    fi
}

# Legacy function for compatibility
check_docker() {
    check_container_runtime
}

start_services() {
    print_status "Starting RTD Kafka environment with ${RUNTIME}..."
    cd "$PROJECT_DIR"
    
    $COMPOSE_CMD up -d
    
    if [ $? -eq 0 ]; then
        print_status "Services started successfully!"
        print_status "Waiting for Kafka to be ready..."
        
        # Wait for Kafka to be healthy
        timeout=120
        counter=0
        while [ $counter -lt $timeout ]; do
            if $COMPOSE_CMD ps | grep -q "healthy\|running"; then
                print_status "Kafka is ready!"
                break
            fi
            sleep 2
            counter=$((counter + 2))
            echo -n "."
        done
        
        if [ $counter -ge $timeout ]; then
            print_warning "Kafka health check timeout, but services are running"
        fi
        
        echo
        show_service_info
    else
        print_error "Failed to start services"
        exit 1
    fi
}

stop_services() {
    print_status "Stopping RTD Kafka environment..."
    cd "$PROJECT_DIR"
    
    $COMPOSE_CMD down
    print_status "Services stopped"
}

restart_services() {
    print_status "Restarting RTD Kafka environment..."
    cd "$PROJECT_DIR"
    
    $COMPOSE_CMD down
    $COMPOSE_CMD up -d
    print_status "Services restarted"
}

show_status() {
    print_header
    echo
    cd "$PROJECT_DIR"
    
    print_status "Docker Compose Services:"
    $COMPOSE_CMD ps
    echo
    
    print_status "Service Health:"
    $COMPOSE_CMD ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
    echo
}

show_logs() {
    cd "$PROJECT_DIR"
    
    if [ $# -eq 0 ]; then
        print_status "Showing logs for all services..."
        $COMPOSE_CMD logs -f
    else
        print_status "Showing logs for service: $1"
        $COMPOSE_CMD logs -f "$1"
    fi
}

setup_complete_environment() {
    print_header
    echo
    print_status "Setting up complete RTD GTFS-RT environment..."
    
    # Start services
    start_services
    
    # Wait a bit more for Kafka to be fully ready
    sleep 10
    
    # Create RTD topics using our built-in tools
    print_status "Creating RTD GTFS-RT topics..."
    cd "$PROJECT_DIR"
    
    if [ -f "target/rtd-gtfs-pipeline-1.0-SNAPSHOT.jar" ]; then
        ./scripts/kafka-topics.sh --create-rtd-topics
        if [ $? -eq 0 ]; then
            print_status "RTD topics created successfully!"
        else
            print_warning "Topic creation failed, but Kafka is running"
        fi
    else
        print_warning "Project not built. Run 'mvn package' first to create topics automatically"
        print_warning "You can create topics manually later with: ./scripts/kafka-topics.sh --create-rtd-topics"
    fi
    
    echo
    print_status "Environment setup complete!"
    show_service_info
}

clean_environment() {
    print_status "Cleaning RTD Kafka environment..."
    cd "$PROJECT_DIR"
    
    $COMPOSE_CMD down -v --remove-orphans
    docker volume prune -f
    print_status "Environment cleaned (all data removed)"
}

show_service_info() {
    print_status "RTD GTFS-RT Environment is ready!"
    echo
    echo "Services:"
    echo "  📊 Kafka:      localhost:9092"
    echo "  🖥️  Kafka UI:   http://localhost:8090"
    echo
    echo "Docker Runtime:"
    if command -v colima &> /dev/null && colima status &> /dev/null; then
        echo "  🐋 Runtime:    Colima ($(colima status | head -1))"
    else
        echo "  🐋 Runtime:    Docker"
    fi
    echo
    echo "Next steps:"
    echo "  1. Build project:           mvn clean package"
    echo "  2. Create topics:           ./scripts/kafka-topics.sh --create-rtd-topics"
    echo "  3. List topics:             ./scripts/kafka-topics.sh --list"
    echo "  4. Run RTD pipeline:        mvn exec:java -Dexec.mainClass=\"com.rtd.pipeline.RTDGTFSPipeline\""
    echo "  5. Query data:              ./scripts/rtd-query.sh health"
}

open_ui() {
    if command -v open &> /dev/null; then
        print_status "Opening Kafka UI in browser..."
        open http://localhost:8090
    elif command -v xdg-open &> /dev/null; then
        print_status "Opening Kafka UI in browser..."
        xdg-open http://localhost:8090
    else
        print_status "Please open http://localhost:8090 in your browser"
    fi
}

manage_colima() {
    if ! command -v colima &> /dev/null; then
        print_error "Colima is not installed"
        print_error "Install with: brew install colima"
        exit 1
    fi

    local cmd=${1:-status}
    
    case "$cmd" in
        "start")
            print_status "Starting Colima VM..."
            colima start --cpu 4 --memory 8 --disk 60
            ;;
        "stop")
            print_status "Stopping Colima VM..."
            colima stop
            ;;
        "restart")
            print_status "Restarting Colima VM..."
            colima stop
            sleep 2
            colima start --cpu 4 --memory 8 --disk 60
            ;;
        "status"|*)
            print_status "Colima status:"
            colima status
            if colima status &> /dev/null; then
                echo
                print_status "Colima VM is running"
                print_status "Docker context: $(docker context show)"
            else
                echo
                print_warning "Colima VM is not running"
                print_status "Start with: ./docker-setup colima start"
            fi
            ;;
    esac
}

# Main execution
main() {
    cd "$PROJECT_DIR"
    
    if [ $# -eq 0 ]; then
        show_usage
        exit 0
    fi
    
    check_docker
    
    case "$1" in
        "start")
            start_services
            ;;
        "stop")
            stop_services
            ;;
        "restart")
            restart_services
            ;;
        "status")
            show_status
            ;;
        "logs")
            shift
            show_logs "$@"
            ;;
        "setup")
            setup_complete_environment
            ;;
        "clean")
            clean_environment
            ;;
        "ui")
            open_ui
            ;;
        "colima")
            shift
            manage_colima "$@"
            ;;
        *)
            print_error "Unknown command: $1"
            show_usage
            exit 1
            ;;
    esac
}

# Handle Ctrl+C gracefully
trap 'echo -e "\n${YELLOW}Operation interrupted by user${NC}"; exit 130' INT

# Run main function with all arguments
main "$@"