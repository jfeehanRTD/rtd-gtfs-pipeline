plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.6'
}

import java.time.Duration

group = 'com.rtd'
version = '1.0-SNAPSHOT'
description = 'RTD GTFS-RT Data Pipeline'

java {
    sourceCompatibility = JavaVersion.VERSION_24
    targetCompatibility = JavaVersion.VERSION_24
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
}

repositories {
    mavenCentral()
    maven { url = 'https://repository.apache.org/content/repositories/snapshots' }
    maven { url = 'https://packages.confluent.io/maven/' }
}

ext {
    flinkVersion = '2.1.0'
    kafkaVersion = '4.0.0'
    slf4jVersion = '2.0.16'
    junitVersion = '5.11.0'
    jacksonVersion = '2.18.1'
    log4jVersion = '2.24.3'
    springBootVersion = '3.4.1'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    // Apache Flink Core Dependencies
    implementation "org.apache.flink:flink-core:${flinkVersion}"
    implementation "org.apache.flink:flink-streaming-java:${flinkVersion}"
    implementation "org.apache.flink:flink-table-api-java-bridge:${flinkVersion}"
    implementation "org.apache.flink:flink-table-planner_2.12:${flinkVersion}"
    implementation "org.apache.flink:flink-table-runtime:${flinkVersion}"
    implementation "org.apache.flink:flink-table-api-java:${flinkVersion}"
    implementation "org.apache.flink:flink-connector-files:${flinkVersion}"
    implementation "org.apache.flink:flink-json:${flinkVersion}"
    implementation "org.apache.flink:flink-connector-kafka:4.0.0-2.0"
    implementation "org.apache.flink:flink-connector-datagen:${flinkVersion}"
    implementation "org.apache.flink:flink-runtime:${flinkVersion}"
    implementation "org.apache.flink:flink-clients:${flinkVersion}"
    
    // JSON Path for Table API
    implementation 'com.jayway.jsonpath:json-path:2.8.0'
    
    // Kafka
    implementation "org.apache.kafka:kafka_2.13:${kafkaVersion}"
    implementation "org.apache.kafka:kafka-clients:${kafkaVersion}"
    
    // GTFS-RT Protobuf
    implementation 'com.google.transit:gtfs-realtime-bindings:0.0.4'
    
    // HTTP Client
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'
    
    // Flink File System Connectors
    implementation "org.apache.flink:flink-parquet:${flinkVersion}"
    implementation "org.apache.flink:flink-csv:${flinkVersion}"
    
    // Scala Dependencies for Table API
    implementation 'org.scala-lang:scala-library:2.12.18'
    testImplementation 'org.scala-lang:scala-compiler:2.12.18'
    
    // JSON Processing
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jacksonVersion}"
    
    // Logging
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "org.apache.logging.log4j:log4j-slf4j2-impl:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    
    // Spring Boot (excluding default logging)
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    implementation("org.springframework.boot:spring-boot-starter:${springBootVersion}") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    
    // HTTP Server
    implementation 'com.sun.net.httpserver:http:20070405'
    implementation 'org.apache.commons:commons-csv:1.12.0'
    implementation 'org.apache.commons:commons-lang3:3.17.0'
    
    // Test Dependencies
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testImplementation "org.apache.flink:flink-test-utils:${flinkVersion}"
    testImplementation 'org.mockito:mockito-core:5.14.2'
    testImplementation 'org.assertj:assertj-core:3.26.3'
    testImplementation 'org.testcontainers:junit-jupiter:1.20.3'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
}

application {
    mainClass = 'com.rtd.pipeline.RTDStaticDataPipeline'
}

// Task to run specific main classes
task runRTDPipeline(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.rtd.pipeline.RTDStaticDataPipeline'
}

task runBusReceiver(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.rtd.pipeline.BusCommHTTPReceiver'
}

task runRailReceiver(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.rtd.pipeline.RailCommHTTPReceiver'
}

task runSpringBootAPI(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.rtd.pipeline.RTDApiApplication'
}

// Configure the JAR task
jar {
    manifest {
        attributes(
            'Main-Class': 'com.rtd.pipeline.RTDStaticDataPipeline',
            'Class-Path': configurations.runtimeClasspath.files.collect { it.name }.join(' ')
        )
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Fat JAR task
task fatJar(type: Jar) {
    archiveBaseName = 'rtd-gtfs-pipeline-all'
    zip64 = true  // Enable ZIP64 for large archives
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(
            'Main-Class': 'com.rtd.pipeline.RTDStaticDataPipeline'
        )
    }
}

tasks.withType(JavaCompile) {
    options.release = 24
    options.compilerArgs += ['--enable-preview']
}

tasks.withType(JavaExec) {
    jvmArgs += ['--enable-preview']
}

test {
    useJUnitPlatform()
    jvmArgs += ['--enable-preview']
    
    // Fix test execution issues
    maxHeapSize = '2g'
    forkEvery = 1  // Fork a new JVM for each test class
    maxParallelForks = 1  // Run tests sequentially to avoid resource conflicts
    
    // Increase test timeout
    timeout = Duration.ofMinutes(10)
    
    // Better test logging
    testLogging {
        events "passed", "skipped", "failed", "standard_out", "standard_error"
        exceptionFormat = 'full'
        showStandardStreams = false
    }
    
    // Exclude problematic tests if they exist
    systemProperty 'junit.jupiter.execution.parallel.enabled', 'false'
}

// ========================================
// RTD SERVICE-SPECIFIC TASKS
// ========================================

// LRGPS Service Tasks
task startLRGPS(type: JavaExec) {
    group = 'rtd-services'
    description = 'Start LRGPS HTTP Receiver service'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.rtd.pipeline.LRGPSHTTPReceiver'
    jvmArgs = [
        '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
        '--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED',
        '--add-opens', 'java.base/java.nio=ALL-UNNAMED'
    ]
}

task testLRGPS(type: JavaExec) {
    group = 'rtd-services'  
    description = 'Test LRGPS service with sample data'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.rtd.pipeline.LRGPSHTTPReceiver'
    args = ['http://localhost:8083', 'lrgps', '90000']
}

// Bus SIRI Service Tasks
task startSIRI(type: JavaExec) {
    group = 'rtd-services'
    description = 'Start Bus SIRI HTTP Receiver service'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.rtd.pipeline.BusCommHTTPReceiver'
    jvmArgs = [
        '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
        '--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED'
    ]
}

// Rail Communication Service Tasks  
task startRailComm(type: JavaExec) {
    group = 'rtd-services'
    description = 'Start Rail Communication HTTP Receiver service'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.rtd.pipeline.RailCommHTTPReceiver'
    jvmArgs = [
        '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
        '--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED'
    ]
}

// GTFS-RT Pipeline Tasks
task runGTFSRTPipeline(type: JavaExec) {
    group = 'rtd-pipelines'
    description = 'Run Working GTFS-RT Generation Pipeline'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.rtd.pipeline.WorkingGTFSRTPipeline'
    jvmArgs = [
        '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
        '--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED',
        '--add-opens', 'java.base/java.nio=ALL-UNNAMED',
        '--add-opens', 'java.base/sun.misc=ALL-UNNAMED'
    ]
}

task runStaticPipeline(type: JavaExec) {
    group = 'rtd-pipelines'
    description = 'Run RTD Static Data Pipeline'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.rtd.pipeline.RTDStaticDataPipeline'
}

// API Server Tasks
task runAPIServer(type: JavaExec) {
    group = 'rtd-services'
    description = 'Run RTD API Application (Spring Boot)'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.rtd.pipeline.RTDApiApplication'
}

// ========================================
// RTD UTILITY TASKS
// ========================================

task checkServices {
    group = 'rtd-utilities'
    description = 'Check status of all RTD services'
    doLast {
        println '=== RTD Service Status Check ==='
        
        // Check LRGPS (port 8083)
        try {
            def lrgpsUrl = new URL('http://localhost:8083/health')
            def lrgpsConnection = lrgpsUrl.openConnection()
            lrgpsConnection.requestMethod = 'GET'
            lrgpsConnection.connectTimeout = 3000
            lrgpsConnection.readTimeout = 3000
            def lrgpsResponse = lrgpsConnection.responseCode
            println "✅ LRGPS Service (8083): ${lrgpsResponse == 200 ? 'RUNNING' : 'ERROR (' + lrgpsResponse + ')'}"
        } catch (Exception e) {
            println "❌ LRGPS Service (8083): STOPPED"
        }
        
        // Check SIRI (port 8082)
        try {
            def siriUrl = new URL('http://localhost:8082/health')
            def siriConnection = siriUrl.openConnection()
            siriConnection.requestMethod = 'GET'
            siriConnection.connectTimeout = 3000
            siriConnection.readTimeout = 3000
            def siriResponse = siriConnection.responseCode
            println "✅ Bus SIRI Service (8082): ${siriResponse == 200 ? 'RUNNING' : 'ERROR (' + siriResponse + ')'}"
        } catch (Exception e) {
            println "❌ Bus SIRI Service (8082): STOPPED"
        }
        
        // Check Rail Comm (port 8081)
        try {
            def railUrl = new URL('http://localhost:8081/health')
            def railConnection = railUrl.openConnection()
            railConnection.requestMethod = 'GET'
            railConnection.connectTimeout = 3000
            railConnection.readTimeout = 3000
            def railResponse = railConnection.responseCode
            println "✅ Rail Communication Service (8081): ${railResponse == 200 ? 'RUNNING' : 'ERROR (' + railResponse + ')'}"
        } catch (Exception e) {
            println "❌ Rail Communication Service (8081): STOPPED"
        }
        
        // Check React App (port 3000)
        try {
            def reactUrl = new URL('http://localhost:3000')
            def reactConnection = reactUrl.openConnection()
            reactConnection.requestMethod = 'GET'
            reactConnection.connectTimeout = 3000
            reactConnection.readTimeout = 3000
            def reactResponse = reactConnection.responseCode
            println "✅ React Dashboard (3000): ${reactResponse == 200 ? 'RUNNING' : 'ERROR (' + reactResponse + ')'}"
        } catch (Exception e) {
            println "❌ React Dashboard (3000): STOPPED"
        }
    }
}

// ========================================
// MULTI-PROJECT ORCHESTRATION TASKS
// ========================================

task buildAll {
    group = 'rtd-orchestration'
    description = 'Build entire RTD system (Java pipeline + React webapp)'
    dependsOn 'build', ':rtd-webapp:buildReact'
}

task testAll {
    group = 'rtd-orchestration' 
    description = 'Run all tests (Java + React Playwright)'
    dependsOn 'test', ':rtd-webapp:testReact'
}

task cleanAll {
    group = 'rtd-orchestration'
    description = 'Clean all build artifacts (Java + React)'
    dependsOn 'cleanRTD', ':rtd-webapp:clean'
}

task checkAllServices {
    group = 'rtd-orchestration'
    description = 'Check status of all RTD services including webapp'
    dependsOn 'checkServices', ':rtd-webapp:checkWebapp'
}

task startFullSystem {
    group = 'rtd-orchestration'
    description = 'Start complete RTD system (build + services + webapp)'
    dependsOn buildAll
    doLast {
        println '''
🚀 RTD System Starting...

To complete system startup, run these in separate terminals:
1. gradle startLRGPS           # LRGPS service (port 8083)
2. gradle startSIRI            # Bus SIRI service (port 8082) 
3. gradle startRailComm        # Rail communication (port 8081)
4. gradle :rtd-webapp:dev      # React dashboard (port 3000)
5. gradle runGTFSRTPipeline    # GTFS-RT generation pipeline

Then check status: gradle checkAllServices
        '''
    }
}

task deployRTD {
    group = 'rtd-orchestration'
    description = 'Full RTD deployment: build + test + package'
    dependsOn buildAll, testAll, ':rtd-webapp:packageWebapp'
    doLast {
        println '✅ RTD system ready for deployment'
        println "📦 Webapp package: ${rootProject.projectDir}/build/distributions/"
        println "🚀 Java artifacts: ${rootProject.projectDir}/target/"
    }
}

task rtdHelp {
    group = 'rtd-utilities'
    description = 'Show RTD-specific Gradle tasks'
    doLast {
        println '''
=== RTD GTFS Pipeline - Gradle Multi-Project Tasks ===

🎯 Multi-Project Orchestration:
  gradle buildAll         - Build entire RTD system (Java + React)
  gradle testAll          - Run all tests (Java + React Playwright)
  gradle cleanAll         - Clean all build artifacts
  gradle checkAllServices - Check status of all RTD services
  gradle startFullSystem  - Build + show startup instructions
  gradle deployRTD        - Full deployment pipeline

🚀 RTD Backend Services:
  gradle startLRGPS       - Start LRGPS HTTP Receiver (port 8083)
  gradle startSIRI        - Start Bus SIRI HTTP Receiver (port 8082) 
  gradle startRailComm    - Start Rail Communication Receiver (port 8081)
  gradle runAPIServer     - Start RTD API Server (Spring Boot)

🔄 RTD Pipelines:
  gradle runGTFSRTPipeline  - Run Working GTFS-RT Generation Pipeline
  gradle runStaticPipeline  - Run RTD Static Data Pipeline

🌐 RTD Frontend (React):
  gradle :rtd-webapp:dev              - Start React dev server (port 3000)
  gradle :rtd-webapp:buildReact       - Build React for production
  gradle :rtd-webapp:testLRGPSIntegration - Test LRGPS functionality
  gradle :rtd-webapp:webappHelp       - Show React-specific tasks

🛠️ RTD Utilities:
  gradle checkServices    - Check backend service status
  gradle rtdHelp         - Show this help message

💡 Quick Examples:
  gradle buildAll                        # Build everything
  gradle testAll                         # Test everything  
  gradle checkAllServices               # Check all services
  gradle startLRGPS                     # Start LRGPS service
  gradle :rtd-webapp:testLRGPSIntegration # Test LRGPS integration

📚 Help:
  gradle tasks --group rtd-orchestration # Show orchestration tasks
  gradle tasks --group rtd-services      # Show service tasks  
  gradle :rtd-webapp:webappHelp          # Show React tasks
        '''
    }
}

// ========================================
// BUILD OPTIMIZATION
// ========================================

// Parallel build optimization
tasks.withType(JavaCompile).configureEach {
    options.fork = true
    options.forkOptions.jvmArgs += [
        '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
        '--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED'
    ]
}

// Custom clean task for RTD-specific artifacts
task cleanRTD {
    group = 'rtd-utilities'
    description = 'Clean RTD-specific build artifacts and logs'
    doLast {
        delete fileTree('.') { include '*.log' }
        delete 'data/gtfs-rt'
        delete 'data/vehicles'  
        delete 'data/schedule'
        println 'Cleaned RTD logs and data directories'
    }
}

clean.dependsOn cleanRTD

// Wrapper configuration
wrapper {
    gradleVersion = '8.14'
    distributionType = Wrapper.DistributionType.ALL
}