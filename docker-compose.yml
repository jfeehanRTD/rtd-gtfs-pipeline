version: '3.8'

services:
  # Kafka and Zookeeper for message streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: rtd-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - rtd-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: rtd-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - rtd-network

  # Main RTD Pipeline Application
  rtd-pipeline:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rtd-pipeline
    depends_on:
      - kafka
    environment:
      # Credentials from environment or .env file
      TIS_PROXY_USERNAME: ${TIS_PROXY_USERNAME}
      TIS_PROXY_PASSWORD: ${TIS_PROXY_PASSWORD}
      TIS_PROXY_HOST: ${TIS_PROXY_HOST:-http://tisproxy.rtd-denver.com}
      TIS_PROXY_SERVICE: ${TIS_PROXY_SERVICE:-siri}
      TIS_PROXY_TTL: ${TIS_PROXY_TTL:-90000}
      RAILCOMM_SERVICE: ${RAILCOMM_SERVICE:-railcomm}
      RAILCOMM_TTL: ${RAILCOMM_TTL:-90000}
      LRGPS_SERVICE: ${LRGPS_SERVICE:-lrgps}
      LRGPS_TTL: ${LRGPS_TTL:-90000}
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      JAVA_OPTS: "-Xms1g -Xmx4g"
    ports:
      - "8080:8080"  # Main API
      - "8081:8081"  # Rail Communication HTTP Receiver
      - "8082:8082"  # Bus SIRI HTTP Receiver
      - "8083:8083"  # LRGPS HTTP Receiver
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./output:/app/output
    networks:
      - rtd-network
    restart: unless-stopped
    command: ["java", "-jar", "app.jar", "com.rtd.pipeline.RTDStaticDataPipeline"]

  # Bus SIRI HTTP Receiver
  bus-receiver:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rtd-bus-receiver
    depends_on:
      - kafka
    environment:
      TIS_PROXY_USERNAME: ${TIS_PROXY_USERNAME}
      TIS_PROXY_PASSWORD: ${TIS_PROXY_PASSWORD}
      TIS_PROXY_HOST: ${TIS_PROXY_HOST:-http://tisproxy.rtd-denver.com}
      TIS_PROXY_SERVICE: ${TIS_PROXY_SERVICE:-siri}
      TIS_PROXY_TTL: ${TIS_PROXY_TTL:-90000}
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8082:8082"
    networks:
      - rtd-network
    restart: unless-stopped
    command: ["java", "-cp", "app.jar", "com.rtd.pipeline.BusCommHTTPReceiver"]

  # Rail Communication HTTP Receiver
  rail-receiver:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rtd-rail-receiver
    depends_on:
      - kafka
    environment:
      TIS_PROXY_USERNAME: ${TIS_PROXY_USERNAME}
      TIS_PROXY_PASSWORD: ${TIS_PROXY_PASSWORD}
      TIS_PROXY_HOST: ${TIS_PROXY_HOST:-http://tisproxy.rtd-denver.com}
      RAILCOMM_SERVICE: ${RAILCOMM_SERVICE:-railcomm}
      RAILCOMM_TTL: ${RAILCOMM_TTL:-90000}
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8081:8081"
    networks:
      - rtd-network
    restart: unless-stopped
    command: ["java", "-cp", "app.jar", "com.rtd.pipeline.RailCommHTTPReceiver"]

  # LRGPS HTTP Receiver
  lrgps-receiver:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rtd-lrgps-receiver
    depends_on:
      - kafka
    environment:
      TIS_PROXY_USERNAME: ${TIS_PROXY_USERNAME}
      TIS_PROXY_PASSWORD: ${TIS_PROXY_PASSWORD}
      TIS_PROXY_HOST: ${TIS_PROXY_HOST:-http://tisproxy.rtd-denver.com}
      LRGPS_SERVICE: ${LRGPS_SERVICE:-lrgps}
      LRGPS_TTL: ${LRGPS_TTL:-90000}
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8083:8083"
    networks:
      - rtd-network
    restart: unless-stopped
    command: ["java", "-cp", "app.jar", "com.rtd.pipeline.LRGPSHTTPReceiver"]

  # React Web Application (optional)
  # web-app:
  #   build:
  #     context: ./rtd-maps-app
  #     dockerfile: Dockerfile
  #   container_name: rtd-web-app
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     REACT_APP_API_URL: http://localhost:8080
  #   networks:
  #     - rtd-network
  #   restart: unless-stopped

networks:
  rtd-network:
    driver: bridge

volumes:
  kafka-data:
  zookeeper-data: